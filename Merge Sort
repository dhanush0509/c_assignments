#include <stdio.h>
void merge(int arr[], int left, int mid, int right)
{
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int left_arr[n1], right_arr[n2];//creating temp arrays 
    for (i = 0; i < n1; i++)  //tt will copy data from main array to temporary arrays
        left_arr[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        right_arr[j] = arr[mid + 1 + j];
 
    i = 0; //  index of first subarray
    j = 0; //  index of second subarray
    k = left; // index of merged subarray
    while (i < n1 && j < n2) 
    {
        if (left_arr[i] <= right_arr[j])
        {
            arr[k] = left_arr[i];
            i++;
        }
        else 
        {
            arr[k] = right_arr[j];
            j++;
        }
        k++;
    }
 
    while (i < n1) // copying the  elements of left array
    {
        arr[k] = left_arr[i];
        i++;
        k++;
    }
 
    while (j < n2) //copying the  elements of right array
    {
        arr[k] = right_arr[j];
        j++;
        k++;
    }
}
void merge_sort(int arr[], int left, int right)
{
    if (left < right) 
    {
        int mid = left + (right - left) / 2;//finding the mid value of the array. 
        merge_sort(arr, left, mid); // sorting the first halve
        merge_sort(arr, mid + 1, right); // sorting the second halve
 
        merge(arr, left, mid, right);//calling the merge function
    }
}
void print_array(int array[], int size)//printing the array
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", array[i]);
    printf("\n");
}
 
int main()
{
    int arr[] = { 9,3,5,7,10,2,1,4,8,6 };
    int arr_size = 10;
 
    printf(" array before sorting  \n");
    print_array(arr, arr_size);
 
    merge_sort(arr, 0, arr_size - 1);
 
    printf("array after sorting  is \n");
    print_array(arr, arr_size);
    return 0;
}
