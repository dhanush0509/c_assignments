#include<stdio.h>
#include<stdlib.h>
struct node 
{
  int data; //storing data
  struct node *right; //right child
  struct node *left; //left child
};
struct node* new_node(int n)//function to create a node
{
  struct node *temp;
  temp = malloc(sizeof(struct node));
  temp -> data = n;
  temp -> left = NULL;
  temp -> right = NULL;
  return temp;
}
struct node* insert(struct node * root, int n)// insertion
{
  if (root == NULL)
    return new_node(n);// return new node if the tree is empty
  else if (n >root-> data) // if n is greater it will be inserted to the right
    root->right = insert(root->right,n);
  else
    root->left = insert(root->left, n); // if n is smaller it will be inserted to left
  return root;
}
struct node* find_minimum(struct node * root) 
{
  if (root == NULL)
    return NULL;
  else if (root -> left != NULL) // node with minimum value will have no left child
    return find_minimum(root -> left); // left most element will be minimum
  return root;
}
struct node* delete(struct node * root, int n) 
{
  if (root == NULL)//searching for the item to be deleted
    return NULL;
  if (n > root -> data)//if it is greater than the root then it will be in right subtree
    root -> right = delete(root -> right, n);
  else if (n < root -> data)//if it is smaller than the root then it will be in left subtree
    root -> left = delete(root -> left, n);
  else 
  {
    if (root -> left == NULL && root -> right == NULL)//node with no child
    {
      free(root);
      return NULL;
    }
    else if (root -> left == NULL || root -> right == NULL)//node with one child
    {
      struct node *temp;
      if (root -> left == NULL)
        temp = root -> right;
      else
        temp = root -> left;
      free(root);
      return temp;
    }
    else //node with two children
    {
      struct node *temp = find_minimum(root -> right);//we will get inorder succesor which will be in right sub tree
      root -> data = temp -> data;
      root -> right = delete(root -> right, temp -> data);
    }
  }
  return root;
}
void inorder(struct node *root)//printing in inorder traversal
{
  if (root == NULL) //checking the root is  null or not
  return;
  inorder(root -> left); // seeing at left child
  printf("%d ->", root -> data); // printing data at root
  inorder(root -> right); //seeing at right child
}
void preorder(struct node* root)//printing in preorder traversal
{
  if (root == NULL)//checking the root is  null or not
  return;
  printf("%d ->", root->data);//printing the data at root
  preorder(root->left); //seeing at left child
  preorder(root->right); //seeing at right child
}
void postorder(struct node* root)//printing in postorder traversal
{
  if (root == NULL) 
  return;
  postorder(root->left);//seeing at left child
  postorder(root->right);//seeing at right child
  printf("%d ->", root->data);//printing the data at root
}
int main() 
{
  struct node *root;
  root = new_node(15);
  insert(root, 2);
  insert(root, 7);
  insert(root, 11);
  insert(root, 9);
  insert(root, 8);
  insert(root, 4);
  insert(root, 14);
  insert(root, 34);
  insert(root, 25);
  insert(root, 17);
  insert(root, 28);
  insert(root, 40);
  insert(root, 36);
  printf("\n printing in inorder traversal \n");
  inorder(root);
  printf("\n printing preorder traversal \n");
  preorder(root);
  printf("\n printing postorder traversal \n");
  postorder(root);
  root = delete(root, 7);
  root = delete(root, 40);
  root = delete(root, 17);
  root = delete(root, 34);
  printf("\n printing the tree in inorder traversal after deleting some nodes \n ");
  inorder(root);
  return 0;
}
