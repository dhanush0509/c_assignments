#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *left;
    struct node *right;
    int height;
};
int get_height(struct node *n)//to find the height of the tree
{
    if(n==NULL)
     return 0;
    return n->height;
}
struct node* create_node(int data)//creating a node
{
    struct node* new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = data;
    new_node->left = NULL;
    new_node->right = NULL;
    new_node->height = 1;//as new node will be added first 
    return new_node;
}
int max (int a, int b)// this will get us the maximun of two numbers
{
   if(a > b)
   return a;//it will return if a is greater
   return b;//it will return if b is greater
}
int get_balance_factor(struct node * n)// this will get the balance factor
{
    if(n==NULL)
    {
        return 0;// balance factor should be 1 or 0 or -1 
    }
    return get_height(n->left) - get_height(n->right);// if it greater than 1 or less than -1 means unbalanced
}
struct node* right_rotate(struct node* y)//right rotatation function 
{
    struct node* x = y->left;//x is on the left side and y is on the right side
    struct node* sub_tree = x->right;

    x->right = y;//now y will go to right side and x will be as root
    y->left = sub_tree;

    x->height = max(get_height(x->right), get_height(x->left)) + 1;// this will update the new height
    y->height = max(get_height(y->right), get_height(y->left)) + 1;
    return x;
}

struct node* left_rotate(struct node* x)//left rotation function
{
    struct node* y = x->right;//x is on the left side and y is on the right side
    struct node* subtree = y->left;

    y->left = x;//now x will go to left side and y will be as root
    x->right = subtree;

    x->height = max(get_height(x->right), get_height(x->left)) + 1;//this will update the new height
    y->height = max(get_height(y->right), get_height(y->left)) + 1;
    return y;
}
struct node *insert(struct node * root, int data)
{
    if (root == NULL)
        return  create_node(data);
    if (data < root->data)
        root->left  = insert(root->left, data);// if n is smaller it will be inserted to left
    else if (data > root->data)
        root->right = insert(root->right, data);// if n is greater it will be inserted to the right

    root->height = 1 + max(get_height(root->left), get_height(root->right));
    int bf = get_balance_factor(root); //if the node is unbalanced means we will have 4 cases
        if(bf>1 && data < root->left->data)//left left case
        {
            return right_rotate(root);
        }
        if(bf<-1 && data > root->right->data)//right right case
        {
            return left_rotate(root);
        }
    if(bf>1 && data > root->left->data)//left right case
       {
            root->left = left_rotate(root->left);
            return right_rotate(root);
        }
    if(bf<-1 && data < root->right->data)//right left case
       {
            root->right = right_rotate(root->right);
            return left_rotate(root);
        }
    return root;
}
void preorder(struct node *root)//this will print the tree in preorder traversal
{
    if(root != NULL)
    {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(struct node *root)//printing in inorder traversal
{
  if (root != NULL) //checking the root is  null or not
  {
     inorder(root -> left);
     printf("%d ",root->data);
     inorder(root -> right);
  }
}
int main()
{
    struct node* root = NULL;
    root = insert(root, 9);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 8);
    root = insert(root, 2);
    root = insert(root, 7);
    root = insert(root, 1);
    root = insert(root, 6);
    root = insert(root, 3);
    printf("\nprinting tree in preorder traversal\n");
    preorder(root);
    printf("\nprinting tree in inorder traversal\n");
    inorder(root);
    return 0;
}
