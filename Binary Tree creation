#include<stdio.h>
#include<stdlib.h>
struct node
{
  int data; //this node will store data
  struct node *left;//left child
  struct node *right;//right child
};
struct node* createnode(int value) //creating  a new Node
{
  struct node* newnode = malloc(sizeof(struct node));// allocating space to newnode
  newnode->data = value; // assinging data to value
  newnode->left = NULL;
  newnode->right = NULL;
  return newnode;
}
void inorder(struct node* root)//printing in inorder traversal
{
  if (root == NULL)//checking the root is  null or not
  return;
  inorder(root->left);//seeing at left child
  printf("%d ->", root->data);//printing the data at root
  inorder(root->right);//seeing at right child
}
void preorder(struct node* root)//printing in preorder traversal
{
  if (root == NULL)//checking the root is  null or not
  return;
  printf("%d ->", root->data);//printing the data at root
  preorder(root->left); //seeing at left child
  preorder(root->right); //seeing at right child
}
void postorder(struct node* root)//printing in postorder traversal
{
  if (root == NULL) 
  return;
  postorder(root->left);//seeing at left child
  postorder(root->right);//seeing at right child
  printf("%d ->", root->data);//printing the data at root
}
int main()
{
  struct node* root = createnode(1);//this is the root node
  root->left= createnode(2);
  root->right= createnode(3);
  root->left->left=createnode(4);
  root->left->right=createnode(5);
  root->right->left=createnode(6);
  root->right->right=createnode(7);
  root->left->left->left=createnode(9);
  root->left->left->right=createnode(10);
  root->left->right->left=createnode(16);
  root->left->right->right=createnode(15);
  root->right->left->left=createnode(19);
  root->right->left->right=createnode(11);
  root->right->right->left=createnode(13);
  root->right->right->right=createnode(12);
  printf("\n preorder traversal \n");// we can display tree in 3 ways by preorder inorder and postorder
  preorder(root);
  printf("\n inorder traversal \n");
  inorder(root);
  printf("\n postorder traversal \n");
  postorder(root);
}
